section .data
    message_input db "Ingrese los numeros: "
    len_msg_input equ $ - message_input
    message_solut db "La solucion es: "
    len_msg_solut equ $ - message_solut
    signo db "-"
    var_a dq 0
    var_b dq 0
    var_c dq 0
    char dq 0
    solucion dq 0

section .text
    global _start

_start:
    ;parametros para activar el sys_write
    mov rax, 1
    mov rdi, 1 
    mov rsi, message_input
    mov rdx, len_msg_input
    syscall

    mov rax, 0
    mov rdi, 0 
    mov rsi, var_a
    mov rdx, 1
    syscall

    mov rax, 0
    mov rdi, 0 
    mov rsi, char
    mov rdx, 1
    syscall

    mov rax, 0
    mov rdi, 0 
    mov rsi, var_b
    mov rdx, 1
    syscall

    mov rax, 0
    mov rdi, 0 
    mov rsi, char
    mov rdx, 1
    syscall

    mov rax, 0
    mov rdi, 0 
    mov rsi, var_c
    mov rdx, 1
    syscall

    mov rax, 0
    mov rdi, 0 
    mov rsi, char
    mov rdx, 1
    syscall

    mov rax, 1
    mov rdi, 1 
    mov rsi, message_solut
    mov rdx, len_msg_solut
    syscall

solution:
    xor rax, rax
    xor rbx, rbx
    xor rcx, rcx
    xor rdx, rdx

    mov rax, [var_b]
    sub rax, 30h
    mul rax ;mul usa rax
    mov r8, rax ;b^2   paso b2 a r8
error:
    mov rax, 4 ;constante 4 a rax
    mov r11, [var_a]
    sub r11, 30h ;pasamos a r11 el valor de a
    mov r12, [var_c]
    sub r12, 30h ;pasamos a r12 el valor de c
    mul r12
    mul r11 ,;rax es 4ac
    mov r9, rax ;4ac a r9

resta:
    sub r8, r9 ;valor de la discriminante a r8

 impresion:
    mov rax, r8 ;paso el valor de la discriminante a rax
    cmp rax, 0 ;comparo con 0 el valor de la discriminante
    jle impresionNegativo ; si es negativo ,lo imprimimos con signo

    impresion_positivo:
    cmp rax, 10 ;si es menor que 10
    jle final ;imprimimos de 1 el valor
    mov rbx, 10 ;de lo contrario imprimos digito x digito
    div rbx ;separando el numero por digitos y el restante queda en rdx, lo muevo a r10
    mov r10, rdx
    add rax, 30h
    mov [solucion], rax

    mov rax, 1
    mov rdi, 1 
    mov rsi, solucion
    mov rdx, 1
    syscall

    mov rax, r10

final:
    add rax, 30h
    mov [solucion], rax

    mov rax, 1
    mov rdi, 1 
    mov rsi, solucion
    mov rdx, 1
    syscall

    mov rax, 1
    mov rdi, 1 
    mov rsi, char
    mov rdx, 1
    syscall

    mov rax, 60
    mov rdi, 0
    syscall

impresionNegativo:    
    mov r13, rax;guardo los valores de rax
    mov r14, rdx;guardo el valor de rdx

    mov rax, 1
    mov rdi, 1 
    mov rsi, signo
    mov rdx, 1
    syscall

    mov rdx, r14;recupero el valor de rdx
    mov rax, r13;recupero el valor de rax
    neg rax;niego la discriminante
    cmp rax, 10 ;comparo si es de 1 digito o mas 

    jle final
    jmp impresion_positivo
