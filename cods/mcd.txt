section .data
    firstmsg db "ingresa los dos numeros a comparar:"
    lenf equ $ - firstmsg

    secondmsg db "el mcd tiene el valor de: "
    lens equ $ - secondmsg
    
    num1D dq 0
    num1U  dq 0
    num2D dq 0
    num2U dq 0
    char dq 0

    solution dq 0
section .text
    global _start

_start:

    mov rax,1
    mov rdi,1
    mov rsi,firstmsg
    mov rdx,lenf
    syscall

    mov rax,0
    mov rdi,0
    mov rsi,num1D
    mov rdx,1
    syscall

    mov rax,0
    mov rdi,0
    mov rsi,num1U
    mov rdx,1
    syscall

    mov rax,0
    mov rdi,0
    mov rsi,char
    mov rdx,1
    syscall


    mov rax,0
    mov rdi,0
    mov rsi,num2D
    mov rdx,1
    syscall

    mov rax,0
    mov rdi,0
    mov rsi,num2U
    mov rdx,1
    syscall

    mov rax,0
    mov rdi,0
    mov rsi,char
    mov rdx,1
    syscall



    mov rax,1
    mov rdi,1
    mov rsi,secondmsg
    mov rdx,lens
    syscall

    xor rax,rax
    xor rbx,rbx
    xor rcx,rcx
    xor rdx,rdx

    
inicio:

    mov rax,10
    mov r10,[num1D]
    sub r10,30h
    mul r10
    mov r11,[num1U]
    sub r11,30h
    add r11,rax ;r11 el primer numero

    mov rax,10
    mov r8,[num2D]
    sub r8,30h
    mul r8
    mov r9,[num2U]
    sub r9,30h
    add r9,rax;segundo numero

mcd:
    cmp r11,r9
    jg primero
    jmp segundo

primero:
    mov rax,r11; 9 a rx
    div r9 ;dive 9/6
    cmp rdx,0;comparo el residuo
    je asignar
    mov r11,r9 ; rax toma 6
    mov r9,rdx ; el nuevo divisor es el residuo
    xor rdx,rdx
    jmp primero

asignar:
    mov rax,r9
    jmp impresion

segundo:
    mov rax,r9
    div r11
    cmp rdx,0
    je asignar2
    mov r9,r11
    mov r11,rdx
    xor rdx,rdx
    jmp segundo

asignar2:
    mov rax,r11

impresion:
    cmp rax,10
    jl final
    mov rcx,10
    div rcx
    mov r10,rdx
    add rax,30h
    mov [solution],rax
    
    mov rax,1
    mov rdi,1
    mov rsi,solution
    mov rdx,1
    syscall
    mov rax,r10

final:
    add rax,30h
    mov [solution],rax
    mov rax,1
    mov rdi,1
    mov rsi,solution
    mov rdx,1
    syscall


    mov rax,60
    mov rax,0
    syscall


    
    

    

